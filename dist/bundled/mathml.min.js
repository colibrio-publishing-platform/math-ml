'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const directives = new WeakMap();
const isDirective = (o) => typeof o === 'function' && directives.has(o);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const isCEPolyfill = window.customElements !== undefined &&
    window.customElements.polyfillWrapFlushCallback !== undefined;
/**
 * Removes nodes, starting from `startNode` (inclusive) to `endNode`
 * (exclusive), from `container`.
 */
const removeNodes = (container, startNode, endNode = null) => {
    let node = startNode;
    while (node !== endNode) {
        const n = node.nextSibling;
        container.removeChild(node);
        node = n;
    }
};

/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = {};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
/**
 * An expression marker used text-positions, not attribute positions,
 * in template.
 */
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
const rewritesStyleAttribute = (() => {
    const el = document.createElement('div');
    el.setAttribute('style', '{{bad value}}');
    return el.getAttribute('style') !== '{{bad value}}';
})();
/**
 * An updateable Template that tracks the location of dynamic parts.
 */
class Template {
    constructor(result, element) {
        this.parts = [];
        this.element = element;
        let index = -1;
        let partIndex = 0;
        const nodesToRemove = [];
        const _prepareTemplate = (template) => {
            const content = template.content;
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
            // null
            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |
                   NodeFilter.SHOW_TEXT */, null, false);
            // The actual previous node, accounting for removals: if a node is removed
            // it will never be the previousNode.
            let previousNode;
            // Used to set previousNode at the top of the loop.
            let currentNode;
            while (walker.nextNode()) {
                index++;
                previousNode = currentNode;
                const node = currentNode = walker.currentNode;
                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                    if (node.hasAttributes()) {
                        const attributes = node.attributes;
                        // Per
                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                        // attributes are not guaranteed to be returned in document order.
                        // In particular, Edge/IE can return them out of order, so we cannot
                        // assume a correspondance between part index and attribute index.
                        let count = 0;
                        for (let i = 0; i < attributes.length; i++) {
                            if (attributes[i].value.indexOf(marker) >= 0) {
                                count++;
                            }
                        }
                        while (count-- > 0) {
                            // Get the template literal section leading up to the first
                            // expression in this attribute
                            const stringForPart = result.strings[partIndex];
                            // Find the attribute name
                            const name = lastAttributeNameRegex.exec(stringForPart)[2];
                            // Find the corresponding attribute
                            // If the attribute name contains special characters, lower-case
                            // it so that on XML nodes with case-sensitive getAttribute() we
                            // can still find the attribute, which will have been lower-cased
                            // by the parser.
                            //
                            // If the attribute name doesn't contain special character, it's
                            // important to _not_ lower-case it, in case the name is
                            // case-sensitive, like with XML attributes like "viewBox".
                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?
                                'style$' :
                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();
                            const attributeValue = node.getAttribute(attributeLookupName);
                            const strings = attributeValue.split(markerRegex);
                            this.parts.push({ type: 'attribute', index, name, strings });
                            node.removeAttribute(attributeLookupName);
                            partIndex += strings.length - 1;
                        }
                    }
                    if (node.tagName === 'TEMPLATE') {
                        _prepareTemplate(node);
                    }
                }
                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                    const nodeValue = node.nodeValue;
                    if (nodeValue.indexOf(marker) < 0) {
                        continue;
                    }
                    const parent = node.parentNode;
                    const strings = nodeValue.split(markerRegex);
                    const lastIndex = strings.length - 1;
                    // We have a part for each match found
                    partIndex += lastIndex;
                    // Generate a new text node for each literal section
                    // These nodes are also used as the markers for node parts
                    for (let i = 0; i < lastIndex; i++) {
                        parent.insertBefore((strings[i] === '') ? createMarker() :
                            document.createTextNode(strings[i]), node);
                        this.parts.push({ type: 'node', index: index++ });
                    }
                    parent.insertBefore(strings[lastIndex] === '' ?
                        createMarker() :
                        document.createTextNode(strings[lastIndex]), node);
                    nodesToRemove.push(node);
                }
                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                    if (node.nodeValue === marker) {
                        const parent = node.parentNode;
                        // Add a new marker node to be the startNode of the Part if any of
                        // the following are true:
                        //  * We don't have a previousSibling
                        //  * previousSibling is being removed (thus it's not the
                        //    `previousNode`)
                        //  * previousSibling is not a Text node
                        //
                        // TODO(justinfagnani): We should be able to use the previousNode
                        // here as the marker node and reduce the number of extra nodes we
                        // add to a template. See
                        // https://github.com/PolymerLabs/lit-html/issues/147
                        const previousSibling = node.previousSibling;
                        if (previousSibling === null || previousSibling !== previousNode ||
                            previousSibling.nodeType !== Node.TEXT_NODE) {
                            parent.insertBefore(createMarker(), node);
                        }
                        else {
                            index--;
                        }
                        this.parts.push({ type: 'node', index: index++ });
                        nodesToRemove.push(node);
                        // If we don't have a nextSibling add a marker node.
                        // We don't have to check if the next node is going to be removed,
                        // because that node will induce a new marker if so.
                        if (node.nextSibling === null) {
                            parent.insertBefore(createMarker(), node);
                        }
                        else {
                            index--;
                        }
                        currentNode = previousNode;
                        partIndex++;
                    }
                    else {
                        let i = -1;
                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {
                            // Comment node has a binding marker inside, make an inactive part
                            // The binding won't work, but subsequent bindings will
                            // TODO (justinfagnani): consider whether it's even worth it to
                            // make bindings in comments work
                            this.parts.push({ type: 'node', index: -1 });
                        }
                    }
                }
            }
        };
        _prepareTemplate(element);
        // Remove text binding nodes after the walk to not disturb the TreeWalker
        for (const n of nodesToRemove) {
            n.parentNode.removeChild(n);
        }
    }
}
const isTemplatePartActive = (part) => part.index !== -1;
// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
const createMarker = () => document.createComment('');
/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#attributes-0
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-character
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */
class TemplateInstance {
    constructor(template, processor, options) {
        this._parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options;
    }
    update(values) {
        let i = 0;
        for (const part of this._parts) {
            if (part !== undefined) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part of this._parts) {
            if (part !== undefined) {
                part.commit();
            }
        }
    }
    _clone() {
        // When using the Custom Elements polyfill, clone the node, rather than
        // importing it, to keep the fragment in the template's document. This
        // leaves the fragment inert so custom elements won't upgrade and
        // potentially modify their contents by creating a polyfilled ShadowRoot
        // while we traverse the tree.
        const fragment = isCEPolyfill ?
            this.template.element.content.cloneNode(true) :
            document.importNode(this.template.element.content, true);
        const parts = this.template.parts;
        let partIndex = 0;
        let nodeIndex = 0;
        const _prepareInstance = (fragment) => {
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
            // null
            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
            let node = walker.nextNode();
            // Loop through all the nodes and parts of a template
            while (partIndex < parts.length && node !== null) {
                const part = parts[partIndex];
                // Consecutive Parts may have the same node index, in the case of
                // multiple bound attributes on an element. So each iteration we either
                // increment the nodeIndex, if we aren't on a node with a part, or the
                // partIndex if we are. By not incrementing the nodeIndex when we find a
                // part, we allow for the next part to be associated with the current
                // node if neccessasry.
                if (!isTemplatePartActive(part)) {
                    this._parts.push(undefined);
                    partIndex++;
                }
                else if (nodeIndex === part.index) {
                    if (part.type === 'node') {
                        const part = this.processor.handleTextExpression(this.options);
                        part.insertAfterNode(node);
                        this._parts.push(part);
                    }
                    else {
                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
                    }
                    partIndex++;
                }
                else {
                    nodeIndex++;
                    if (node.nodeName === 'TEMPLATE') {
                        _prepareInstance(node.content);
                    }
                    node = walker.nextNode();
                }
            }
        };
        _prepareInstance(fragment);
        if (isCEPolyfill) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */
class TemplateResult {
    constructor(strings, values, type, processor) {
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */
    getHTML() {
        const l = this.strings.length - 1;
        let html = '';
        let isTextBinding = true;
        for (let i = 0; i < l; i++) {
            const s = this.strings[i];
            html += s;
            const close = s.lastIndexOf('>');
            // We're in a text position if the previous string closed its last tag, an
            // attribute position if the string opened an unclosed tag, and unchanged
            // if the string had no brackets at all:
            //
            // "...>...": text position. open === -1, close > -1
            // "...<...": attribute position. open > -1
            // "...": no change. open === -1, close === -1
            isTextBinding =
                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;
            if (!isTextBinding && rewritesStyleAttribute) {
                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {
                    return (p2 === 'style') ? `${p1}style$${p3}` : match;
                });
            }
            html += isTextBinding ? nodeMarker : marker;
        }
        html += this.strings[l];
        return html;
    }
    getTemplateElement() {
        const template = document.createElement('template');
        template.innerHTML = this.getHTML();
        return template;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const isPrimitive = (value) => (value === null ||
    !(typeof value === 'object' || typeof value === 'function'));
/**
 * Sets attribute values for AttributeParts, so that the value is only set once
 * even if there are multiple parts for an attribute.
 */
class AttributeCommitter {
    constructor(element, name, strings) {
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for (let i = 0; i < strings.length - 1; i++) {
            this.parts[i] = this._createPart();
        }
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings = this.strings;
        const l = strings.length - 1;
        let text = '';
        for (let i = 0; i < l; i++) {
            text += strings[i];
            const part = this.parts[i];
            if (part !== undefined) {
                const v = part.value;
                if (v != null &&
                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {
                    for (const t of v) {
                        text += typeof t === 'string' ? t : String(t);
                    }
                }
                else {
                    text += typeof v === 'string' ? v : String(v);
                }
            }
        }
        text += strings[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
class AttributePart {
    constructor(comitter) {
        this.value = undefined;
        this.committer = comitter;
    }
    setValue(value) {
        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            // If the value is a not a directive, dirty the committer so that it'll
            // call setAttribute. If the value is a directive, it'll dirty the
            // committer if it calls setValue().
            if (!isDirective(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while (isDirective(this.value)) {
            const directive$$1 = this.value;
            this.value = noChange;
            directive$$1(this);
        }
        if (this.value === noChange) {
            return;
        }
        this.committer.commit();
    }
}
class NodePart {
    constructor(options) {
        this.value = undefined;
        this._pendingValue = undefined;
        this.options = options;
    }
    /**
     * Inserts this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendInto(container) {
        this.startNode = container.appendChild(createMarker());
        this.endNode = container.appendChild(createMarker());
    }
    /**
     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and
     * its next sibling must be static, unchanging nodes such as those that appear
     * in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendIntoPart(part) {
        part._insert(this.startNode = createMarker());
        part._insert(this.endNode = createMarker());
    }
    /**
     * Appends this part after `ref`
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterPart(ref) {
        ref._insert(this.startNode = createMarker());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this._pendingValue = value;
    }
    commit() {
        while (isDirective(this._pendingValue)) {
            const directive$$1 = this._pendingValue;
            this._pendingValue = noChange;
            directive$$1(this);
        }
        const value = this._pendingValue;
        if (value === noChange) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this._commitText(value);
            }
        }
        else if (value instanceof TemplateResult) {
            this._commitTemplateResult(value);
        }
        else if (value instanceof Node) {
            this._commitNode(value);
        }
        else if (Array.isArray(value) || value[Symbol.iterator]) {
            this._commitIterable(value);
        }
        else if (value.then !== undefined) {
            this._commitPromise(value);
        }
        else {
            // Fallback, will render the string representation
            this._commitText(value);
        }
    }
    _insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    _commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this._insert(value);
        this.value = value;
    }
    _commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? '' : value;
        if (node === this.endNode.previousSibling &&
            node.nodeType === Node.TEXT_NODE) {
            // If we only have a single text node between the markers, we can just
            // set its value, rather than replacing it.
            // TODO(justinfagnani): Can we just check if this.value is primitive?
            node.textContent = value;
        }
        else {
            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));
        }
        this.value = value;
    }
    _commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value && this.value.template === template) {
            this.value.update(value.values);
        }
        else {
            // Make sure we propagate the template processor from the TemplateResult
            // so that we use its syntax extension, etc. The template factory comes
            // from the render function options so that it can control template
            // caching and preprocessing.
            const instance = new TemplateInstance(template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this._commitNode(fragment);
            this.value = instance;
        }
    }
    _commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If _value is an array, then the previous render was of an
        // iterable and _value will contain the NodeParts from the previous
        // render. If _value is not an array, clear this part and make a new
        // array for NodeParts.
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            // Try to reuse an existing part
            itemPart = itemParts[partIndex];
            // If no existing part, create a new one
            if (itemPart === undefined) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) {
                    itemPart.appendIntoPart(this);
                }
                else {
                    itemPart.insertAfterPart(itemParts[partIndex - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    _commitPromise(value) {
        this.value = value;
        value.then((v) => {
            if (this.value === value) {
                this.setValue(v);
                this.commit();
            }
        });
    }
    clear(startNode = this.startNode) {
        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */
class BooleanAttributePart {
    constructor(element, name, strings) {
        this.value = undefined;
        this._pendingValue = undefined;
        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
            throw new Error('Boolean attributes can only contain a single expression');
        }
        this.element = element;
        this.name = name;
        this.strings = strings;
    }
    setValue(value) {
        this._pendingValue = value;
    }
    commit() {
        while (isDirective(this._pendingValue)) {
            const directive$$1 = this._pendingValue;
            this._pendingValue = noChange;
            directive$$1(this);
        }
        if (this._pendingValue === noChange) {
            return;
        }
        const value = !!this._pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, '');
            }
            else {
                this.element.removeAttribute(this.name);
            }
        }
        this.value = value;
        this._pendingValue = noChange;
    }
}
/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */
class PropertyCommitter extends AttributeCommitter {
    constructor(element, name, strings) {
        super(element, name, strings);
        this.single =
            (strings.length === 2 && strings[0] === '' && strings[1] === '');
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the thrid
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
let eventOptionsSupported = false;
try {
    const options = {
        get capture() {
            eventOptionsSupported = true;
            return false;
        }
    };
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
}
catch (_e) {
}
class EventPart {
    constructor(element, eventName, eventContext) {
        this.value = undefined;
        this._pendingValue = undefined;
        this.element = element;
        this.eventName = eventName;
        this.eventContext = eventContext;
    }
    setValue(value) {
        this._pendingValue = value;
    }
    commit() {
        while (isDirective(this._pendingValue)) {
            const directive$$1 = this._pendingValue;
            this._pendingValue = noChange;
            directive$$1(this);
        }
        if (this._pendingValue === noChange) {
            return;
        }
        const newListener = this._pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null ||
            oldListener != null &&
                (newListener.capture !== oldListener.capture ||
                    newListener.once !== oldListener.once ||
                    newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this, this._options);
        }
        this._options = getOptions(newListener);
        if (shouldAddListener) {
            this.element.addEventListener(this.eventName, this, this._options);
        }
        this.value = newListener;
        this._pendingValue = noChange;
    }
    handleEvent(event) {
        const listener = (typeof this.value === 'function') ?
            this.value :
            (typeof this.value.handleEvent === 'function') ?
                this.value.handleEvent :
                () => null;
        listener.call(this.eventContext || this.element, event);
    }
}
// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
const getOptions = (o) => o &&
    (eventOptionsSupported ?
        { capture: o.capture, passive: o.passive, once: o.once } :
        o.capture);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Creates Parts when a template is instantiated.
 */
class DefaultTemplateProcessor {
    /**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === '.') {
            const comitter = new PropertyCommitter(element, name.slice(1), strings);
            return comitter.parts;
        }
        if (prefix === '@') {
            return [new EventPart(element, name.slice(1), options.eventContext)];
        }
        if (prefix === '?') {
            return [new BooleanAttributePart(element, name.slice(1), strings)];
        }
        const comitter = new AttributeCommitter(element, name, strings);
        return comitter.parts;
    }
    /**
     * Create parts for a text-position binding.
     * @param templateFactory
     */
    handleTextExpression(options) {
        return new NodePart(options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */
function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === undefined) {
        templateCache = new Map();
        templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.get(result.strings);
    if (template === undefined) {
        template = new Template(result, result.getTemplateElement());
        templateCache.set(result.strings, template);
    }
    return template;
}
// The first argument to JS template tags retain identity across multiple
// calls to a tag for the same literal, so we can cache work done per literal
// in a Map.
const templateCaches = new Map();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const parts = new WeakMap();
/**
 * Renders a template to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result a TemplateResult created by evaluating a template tag like
 *     `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */
const render = (result, container, options) => {
    let part = parts.get(container);
    if (part === undefined) {
        removeNodes(container, container.firstChild);
        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
        part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */
const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;
/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */
function removeNodesFromTemplate(template, nodesToRemove) {
    const { element: { content }, parts } = template;
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let part = parts[partIndex];
    let nodeIndex = -1;
    let removeCount = 0;
    const nodesToRemoveInTemplate = [];
    let currentRemovingNode = null;
    while (walker.nextNode()) {
        nodeIndex++;
        const node = walker.currentNode;
        // End removal if stepped past the removing node
        if (node.previousSibling === currentRemovingNode) {
            currentRemovingNode = null;
        }
        // A node to remove was found in the template
        if (nodesToRemove.has(node)) {
            nodesToRemoveInTemplate.push(node);
            // Track node we're removing
            if (currentRemovingNode === null) {
                currentRemovingNode = node;
            }
        }
        // When removing, increment count by which to adjust subsequent part indices
        if (currentRemovingNode !== null) {
            removeCount++;
        }
        while (part !== undefined && part.index === nodeIndex) {
            // If part is in a removed node deactivate it by setting index to -1 or
            // adjust the index as needed.
            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
            // go to the next active part.
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            part = parts[partIndex];
        }
    }
    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
}
const countNodes = (node) => {
    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;
    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
    while (walker.nextNode()) {
        count++;
    }
    return count;
};
const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
    for (let i = startIndex + 1; i < parts.length; i++) {
        const part = parts[i];
        if (isTemplatePartActive(part)) {
            return i;
        }
    }
    return -1;
};
/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */
function insertNodeIntoTemplate(template, node, refNode = null) {
    const { element: { content }, parts } = template;
    // If there's no refNode, then put node at end of template.
    // No part indices need to be shifted in this case.
    if (refNode === null || refNode === undefined) {
        content.appendChild(node);
        return;
    }
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let insertCount = 0;
    let walkerIndex = -1;
    while (walker.nextNode()) {
        walkerIndex++;
        const walkerNode = walker.currentNode;
        if (walkerNode === refNode) {
            insertCount = countNodes(node);
            refNode.parentNode.insertBefore(node, refNode);
        }
        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
            // If we've inserted the node, simply adjust all subsequent parts
            if (insertCount > 0) {
                while (partIndex !== -1) {
                    parts[partIndex].index += insertCount;
                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                }
                return;
            }
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
        }
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// Get a key to lookup in `templateCaches`.
const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
let compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === 'undefined') {
    compatibleShadyCSSVersion = false;
}
else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
    console.warn(`Incompatible ShadyCSS version detected.` +
        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +
        `@webcomponents/shadycss@1.3.1.`);
    compatibleShadyCSSVersion = false;
}
/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */
const shadyTemplateFactory = (scopeName) => (result) => {
    const cacheKey = getTemplateCacheKey(result.type, scopeName);
    let templateCache = templateCaches.get(cacheKey);
    if (templateCache === undefined) {
        templateCache = new Map();
        templateCaches.set(cacheKey, templateCache);
    }
    let template = templateCache.get(result.strings);
    if (template === undefined) {
        const element = result.getTemplateElement();
        if (compatibleShadyCSSVersion) {
            window.ShadyCSS.prepareTemplateDom(element, scopeName);
        }
        template = new Template(result, element);
        templateCache.set(result.strings, template);
    }
    return template;
};
const TEMPLATE_TYPES = ['html', 'svg'];
/**
 * Removes all style elements from Templates for the given scopeName.
 */
const removeStylesFromLitTemplates = (scopeName) => {
    TEMPLATE_TYPES.forEach((type) => {
        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
        if (templates !== undefined) {
            templates.forEach((template) => {
                const { element: { content } } = template;
                // IE 11 doesn't support the iterable param Set constructor
                const styles = new Set();
                Array.from(content.querySelectorAll('style')).forEach((s) => {
                    styles.add(s);
                });
                removeNodesFromTemplate(template, styles);
            });
        }
    });
};
const shadyRenderSet = new Set();
/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */
const prepareTemplateStyles = (renderedDOM, template, scopeName) => {
    shadyRenderSet.add(scopeName);
    // Move styles out of rendered DOM and store.
    const styles = renderedDOM.querySelectorAll('style');
    // If there are no styles, there's no work to do.
    if (styles.length === 0) {
        return;
    }
    const condensedStyle = document.createElement('style');
    // Collect styles into a single style. This helps us make sure ShadyCSS
    // manipulations will not prevent us from being able to fix up template
    // part indices.
    // NOTE: collecting styles is inefficient for browsers but ShadyCSS
    // currently does this anyway. When it does not, this should be changed.
    for (let i = 0; i < styles.length; i++) {
        const style = styles[i];
        style.parentNode.removeChild(style);
        condensedStyle.textContent += style.textContent;
    }
    // Remove styles from nested templates in this scope.
    removeStylesFromLitTemplates(scopeName);
    // And then put the condensed style into the "root" template passed in as
    // `template`.
    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);
    // Note, it's important that ShadyCSS gets the template that `lit-html`
    // will actually render so that it can update the style inside when
    // needed (e.g. @apply native Shadow DOM case).
    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
    if (window.ShadyCSS.nativeShadow) {
        // When in native Shadow DOM, re-add styling to rendered content using
        // the style ShadyCSS produced.
        const style = template.element.content.querySelector('style');
        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
    }
    else {
        // When not in native Shadow DOM, at this point ShadyCSS will have
        // removed the style from the lit template and parts will be broken as a
        // result. To fix this, we put back the style node ShadyCSS removed
        // and then tell lit to remove that node from the template.
        // NOTE, ShadyCSS creates its own style so we can safely add/remove
        // `condensedStyle` here.
        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);
        const removes = new Set();
        removes.add(condensedStyle);
        removeNodesFromTemplate(template, removes);
    }
};
const render$1 = (result, container, options) => {
    const scopeName = options.scopeName;
    const hasRendered = parts.has(container);
    render(result, container, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
    // When rendering a TemplateResult, scope the template with ShadyCSS
    if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&
        result instanceof TemplateResult) {
        // Scope the element template one time only for this scope.
        if (!shadyRenderSet.has(scopeName)) {
            const part = parts.get(container);
            const instance = part.value;
            prepareTemplateStyles(container, instance.template, scopeName);
        }
        // Update styling if this is the initial render to this container.
        if (!hasRendered) {
            window.ShadyCSS.styleElement(container.host);
        }
    }
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// serializer/deserializers for boolean attribute
const fromBooleanAttribute = (value) => value !== null;
const toBooleanAttribute = (value) => value ? '' : null;
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => {
    // This ensures (old==NaN, value==NaN) always returns false
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    reflect: false,
    hasChanged: notEqual
};
const microtaskPromise = new Promise((resolve) => resolve(true));
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING = 1 << 3;
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 */
class UpdatingElement extends HTMLElement {
    constructor() {
        super();
        this._updateState = 0;
        this._instanceProperties = undefined;
        this._updatePromise = microtaskPromise;
        /**
         * Map with keys for any properties that have changed since the last
         * update cycle with previous values.
         */
        this._changedProperties = new Map();
        /**
         * Map with keys of properties that should be reflected when updated.
         */
        this._reflectingProperties = undefined;
        this.initialize();
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     */
    static get observedAttributes() {
        // note: piggy backing on this to ensure we're _finalized.
        this._finalize();
        const attributes = [];
        for (const [p, v] of this._classProperties) {
            const attr = this._attributeNameForProperty(p, v);
            if (attr !== undefined) {
                this._attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        }
        return attributes;
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        // ensure private storage for property declarations.
        if (!this.hasOwnProperty('_classProperties')) {
            this._classProperties = new Map();
            // NOTE: Workaround IE11 not supporting Map constructor argument.
            const superProperties = Object.getPrototypeOf(this)._classProperties;
            if (superProperties !== undefined) {
                superProperties.forEach((v, k) => this._classProperties.set(k, v));
            }
        }
        this._classProperties.set(name, options);
        // Allow user defined accessors by not replacing an existing own-property
        // accessor.
        if (this.prototype.hasOwnProperty(name)) {
            return;
        }
        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
        Object.defineProperty(this.prototype, name, {
            get() { return this[key]; },
            set(value) {
                const oldValue = this[name];
                this[key] = value;
                this._requestPropertyUpdate(name, oldValue, options);
            },
            configurable: true,
            enumerable: true
        });
    }
    /**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     */
    static _finalize() {
        if (this.hasOwnProperty('_finalized') && this._finalized) {
            return;
        }
        // finalize any superclasses
        const superCtor = Object.getPrototypeOf(this);
        if (typeof superCtor._finalize === 'function') {
            superCtor._finalize();
        }
        this._finalized = true;
        // initialize Map populated in observedAttributes
        this._attributeToPropertyMap = new Map();
        // make any properties
        const props = this.properties;
        // support symbols in properties (IE11 does not support this)
        const propKeys = [
            ...Object.getOwnPropertyNames(props),
            ...(typeof Object.getOwnPropertySymbols === 'function')
                ? Object.getOwnPropertySymbols(props)
                : []
        ];
        for (const p of propKeys) {
            // note, use of `any` is due to TypeSript lack of support for symbol in
            // index types
            this.createProperty(p, props[p]);
        }
    }
    /**
     * Returns the property name for the given attribute `name`.
     */
    static _attributeNameForProperty(name, options) {
        const attribute = options !== undefined && options.attribute;
        return attribute === false
            ? undefined
            : (typeof attribute === 'string'
                ? attribute
                : (typeof name === 'string' ? name.toLowerCase()
                    : undefined));
    }
    /**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     */
    static _valueHasChanged(value, old, hasChanged = notEqual) {
        return hasChanged(value, old);
    }
    /**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's `type`
     * or `type.fromAttribute` property option.
     */
    static _propertyValueFromAttribute(value, options) {
        const type = options && options.type;
        if (type === undefined) {
            return value;
        }
        // Note: special case `Boolean` so users can use it as a `type`.
        const fromAttribute = type === Boolean
            ? fromBooleanAttribute
            : (typeof type === 'function' ? type : type.fromAttribute);
        return fromAttribute ? fromAttribute(value) : value;
    }
    /**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     */
    static _propertyValueToAttribute(value, options) {
        if (options === undefined || options.reflect === undefined) {
            return;
        }
        // Note: special case `Boolean` so users can use it as a `type`.
        const toAttribute = options.type === Boolean
            ? toBooleanAttribute
            : (options.type &&
                options.type.toAttribute ||
                String);
        return toAttribute(value);
    }
    /**
     * Performs element initialization. By default this calls `createRenderRoot`
     * to create the element `renderRoot` node and captures any pre-set values for
     * registered properties.
     */
    initialize() {
        this.renderRoot = this.createRenderRoot();
        this._saveInstanceProperties();
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    _saveInstanceProperties() {
        for (const [p] of this.constructor
            ._classProperties) {
            if (this.hasOwnProperty(p)) {
                const value = this[p];
                delete this[p];
                if (!this._instanceProperties) {
                    this._instanceProperties = new Map();
                }
                this._instanceProperties.set(p, value);
            }
        }
    }
    /**
     * Applies previously saved instance properties.
     */
    _applyInstanceProperties() {
        for (const [p, v] of this._instanceProperties) {
            this[p] = v;
        }
        this._instanceProperties = undefined;
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */
    createRenderRoot() {
        return this.attachShadow({ mode: 'open' });
    }
    /**
     * Uses ShadyCSS to keep element DOM updated.
     */
    connectedCallback() {
        if ((this._updateState & STATE_HAS_UPDATED)) {
            if (window.ShadyCSS !== undefined) {
                window.ShadyCSS.styleElement(this);
            }
        }
        else {
            this.requestUpdate();
        }
    }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */
    disconnectedCallback() { }
    /**
     * Synchronizes property values when attributes change.
     */
    attributeChangedCallback(name, old, value) {
        if (old !== value) {
            this._attributeToProperty(name, value);
        }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        const ctor = this.constructor;
        const attrValue = ctor._propertyValueToAttribute(value, options);
        if (attrValue !== undefined) {
            const attr = ctor._attributeNameForProperty(name, options);
            if (attr !== undefined) {
                // Track if the property is being reflected to avoid
                // setting the property again via `attributeChangedCallback`. Note:
                // 1. this takes advantage of the fact that the callback is synchronous.
                // 2. will behave incorrectly if multiple attributes are in the reaction
                // stack at time of calling. However, since we process attributes
                // in `update` this should not be possible (or an extreme corner case
                // that we'd like to discover).
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING;
                if (attrValue === null) {
                    this.removeAttribute(attr);
                }
                else {
                    this.setAttribute(attr, attrValue);
                }
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING;
            }
        }
    }
    _attributeToProperty(name, value) {
        // Use tracking info to avoid deserializing attribute value if it was
        // just set from a property setter.
        if (!(this._updateState & STATE_IS_REFLECTING)) {
            const ctor = this.constructor;
            const propName = ctor._attributeToPropertyMap.get(name);
            if (propName !== undefined) {
                const options = ctor._classProperties.get(propName);
                this[propName] =
                    ctor._propertyValueFromAttribute(value, options);
            }
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */
    requestUpdate(name, oldValue) {
        if (name !== undefined) {
            const options = this.constructor
                ._classProperties.get(name) ||
                defaultPropertyDeclaration;
            return this._requestPropertyUpdate(name, oldValue, options);
        }
        return this._invalidate();
    }
    /**
     * Requests an update for a specific property and records change information.
     * @param name {PropertyKey} name of requesting property
     * @param oldValue {any} old value of requesting property
     * @param options {PropertyDeclaration}
     */
    _requestPropertyUpdate(name, oldValue, options) {
        if (!this.constructor
            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {
            return this.updateComplete;
        }
        // track old value when changing.
        if (!this._changedProperties.has(name)) {
            this._changedProperties.set(name, oldValue);
        }
        // add to reflecting properties set
        if (options.reflect === true) {
            if (this._reflectingProperties === undefined) {
                this._reflectingProperties = new Map();
            }
            this._reflectingProperties.set(name, options);
        }
        return this._invalidate();
    }
    /**
     * Invalidates the element causing it to asynchronously update regardless
     * of whether or not any property changes are pending. This method is
     * automatically called when any registered property changes.
     */
    async _invalidate() {
        if (!this._hasRequestedUpdate) {
            // mark state updating...
            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
            let resolver;
            const previousValidatePromise = this._updatePromise;
            this._updatePromise = new Promise((r) => resolver = r);
            await previousValidatePromise;
            this._validate();
            resolver(!this._hasRequestedUpdate);
        }
        return this.updateComplete;
    }
    get _hasRequestedUpdate() {
        return (this._updateState & STATE_UPDATE_REQUESTED);
    }
    /**
     * Validates the element by updating it.
     */
    _validate() {
        // Mixin instance properties once, if they exist.
        if (this._instanceProperties) {
            this._applyInstanceProperties();
        }
        if (this.shouldUpdate(this._changedProperties)) {
            const changedProperties = this._changedProperties;
            this.update(changedProperties);
            this._markUpdated();
            if (!(this._updateState & STATE_HAS_UPDATED)) {
                this._updateState = this._updateState | STATE_HAS_UPDATED;
                this.firstUpdated(changedProperties);
            }
            this.updated(changedProperties);
        }
        else {
            this._markUpdated();
        }
    }
    _markUpdated() {
        this._changedProperties = new Map();
        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. This getter can be implemented to
     * await additional state. For example, it is sometimes useful to await a
     * rendered element before fulfilling this Promise. To do this, first await
     * `super.updateComplete` then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */
    get updateComplete() { return this._updatePromise; }
    /**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated DOM in the element's
     * `renderRoot`. Setting properties inside this method will *not* trigger
     * another update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */
    update(_changedProperties) {
        if (this._reflectingProperties !== undefined &&
            this._reflectingProperties.size > 0) {
            for (const [k, v] of this._reflectingProperties) {
                this._propertyToAttribute(k, this[k], v);
            }
            this._reflectingProperties = undefined;
        }
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */
    updated(_changedProperties) { }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */
    firstUpdated(_changedProperties) { }
}
/**
 * Maps attribute names to properties; for example `foobar` attribute
 * to `fooBar` property.
 */
UpdatingElement._attributeToPropertyMap = new Map();
/**
 * Marks class as having finished creating properties.
 */
UpdatingElement._finalized = true;
/**
 * Memoized list of all class properties, including any superclass properties.
 */
UpdatingElement._classProperties = new Map();
UpdatingElement.properties = {};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * @param tagName the name of the custom element to define
 *
 * In TypeScript, the `tagName` passed to `customElement` must be a key of the
 * `HTMLElementTagNameMap` interface. To add your element to the interface,
 * declare the interface in this module:
 *
 *     @customElement('my-element')
 *     export class MyElement extends LitElement {}
 *
 *     declare global {
 *       interface HTMLElementTagNameMap {
 *         'my-element': MyElement;
 *       }
 *     }
 *
 */
const customElement = (tagName) => (clazz) => {
    window.customElements.define(tagName, clazz);
    // Cast as any because TS doesn't recognize the return type as being a
    // subtype of the decorated class when clazz is typed as
    // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`
    // is helpful to make sure the decorator is applied to elements however.
    return clazz;
};
/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A `PropertyDeclaration` may optionally be
 * supplied to configure property features.
 */
const property = (options) => (proto, name) => {
    proto.constructor.createProperty(name, options);
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class LitElement extends UpdatingElement {
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * * @param _changedProperties Map of changed properties with old values
     */
    update(changedProperties) {
        super.update(changedProperties);
        const templateResult = this.render();
        if (templateResult instanceof TemplateResult) {
            this.constructor
                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
        }
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     * @returns {TemplateResult} Must return a lit-html TemplateResult.
     */
    render() { }
}
/**
 * Render method used to render the lit-html TemplateResult to the element's
 * DOM.
 * @param {TemplateResult} Template to render.
 * @param {Element|DocumentFragment} Node into which to render.
 * @param {String} Element name.
 */
LitElement.render = render$1;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
class MathMLElement extends LitElement {
    updated(propVals) {
        if (propVals.has('mathcolor')) {
            this.style.setProperty('--math-color', this.mathcolor || null);
        }
        if (propVals.has('mathbackground')) {
            this.style.setProperty('--math-background', this.mathbackground || null);
        }
    }
}
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], MathMLElement.prototype, "mathbackground", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], MathMLElement.prototype, "mathcolor", void 0);
function element(name) {
    return customElement(name);
}

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathElement = class MathElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        font-size: inherit;
        font-style: normal;
        font-family: serif;
        line-height: 1.5;
        word-spacing: normal;
        letter-spacing: normal;
        text-rendering: optimizeLegibility;
        direction: ltr;
        unicode-bidi: embed;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathElement = __decorate$1([
    element('math-ml')
], exports.MathElement);

const horizontal = `.layout.horizontal {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -ms-flex-direction: row;
  -webkit-flex-direction: row;
  flex-direction: row;
}`;
const vertical = `.layout.vertical {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -ms-flex-direction: column;
  -webkit-flex-direction: column;
  flex-direction: column;
}`;
const flex = `.flex {
  -ms-flex: 1 1 0.000000001px;
  -webkit-flex: 1;
  flex: 1;
  -webkit-flex-basis: 0.000000001px;
  flex-basis: 0.000000001px;
}`;
const center = `.center {
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
}`;
const AllFlex = html `
  ${vertical}
  ${horizontal}
  ${flex}
  ${center}
`;
const VertFlex = html `
  ${vertical}
  ${flex}
`;
const HorizFlex = html `
  ${horizontal}
  ${flex}
`;
const HorizCenterFlex = html `
  ${horizontal}
  ${flex}
  ${center}
`;

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathRowElement = class MathRowElement extends MathMLElement {
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      .layout.horizontal {
        align-items: baseline;
      }
      .layout.horizontal.centered {
        align-items: center;
      }
      .layout.horizontal.justified {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      }
    </style>
    <div id="mrowPanel" class="horizontal layout"><slot @slotchange="${this.onSlotChange}"></slot></div>
    `;
    }
    onSlotChange() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        const panel = this.shadowRoot.querySelector('#mrowPanel');
        if (!slot || !panel) {
            return;
        }
        panel.classList.remove('centered');
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        let opCount = 0;
        let centeringNodeCount = 0;
        let center = false;
        for (let i = 0; i < nodes.length; i++) {
            const text = (nodes[i].textContent || '').trim();
            if (text === '=') {
                center = true;
                break;
            }
            const tagName = nodes[i].tagName.toLowerCase();
            switch (tagName) {
                case 'math-underover':
                case 'math-under':
                case 'math-over':
                case 'math-subsup':
                    centeringNodeCount++;
                    break;
                case 'math-o':
                    opCount++;
                    break;
                case 'math-table':
                    center = true;
                    break;
                default:
                    break;
            }
        }
        if (!center) {
            if (centeringNodeCount && (!opCount)) {
                center = true;
            }
        }
        if (center) {
            panel.classList.add('centered');
        }
        panel.classList.remove('justified');
        if ((getComputedStyle(this).getPropertyValue('--math-underover-align') || '').trim() === 'center'
            || (getComputedStyle(this).getPropertyValue('--math-under-align') || '').trim() === 'center'
            || (getComputedStyle(this).getPropertyValue('--math-over-align') || '').trim() === 'center') {
            panel.classList.add('justified');
        }
    }
};
exports.MathRowElement = __decorate$2([
    element('math-row')
], exports.MathRowElement);

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathNElement = class MathNElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathNElement = __decorate$3([
    element('math-n')
], exports.MathNElement);

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathOElement = class MathOElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.formStyle = '';
    }
    render() {
        return html `
    <style>
      :host {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
        position: relative;
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      :host(.mo-infix) {
        margin: 0 0.2em;
      }
      :host(.mo-separator) {
        margin: 0 0.2em 0 0;
      }
      :host(.mo-product) {
        margin: 0;
      }
      :host(.mo-begin-brace) {
        margin: 0 0.05em 0 0.2em;
      }
      :host(.mo-end-brace) {
        margin: 0 0.2em 0 0.05em;
      }
      :host(.mo-neut-brace) {
        margin: 0 0.16em;
      }
      :host(.mo-stretchy) {
        align-self: stretch;
      }
      :host(.mo-bigger) {
        line-height: 1.1;
        font-size: 1.8em;
      }
      .invisible {
        opacity: 0;
      }
      .fullWidthSpan {
        width: 100%;
        box-sizing: border-box;
        text-align: center;
      }
    </style>
    <span class="invisible"><slot @slotchange="${this.onSlotChange}"></slot></span>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.onSlotChange();
    }
    onSlotChange() {
        if (!this.shadowRoot) {
            return;
        }
        const span = this.shadowRoot.querySelector('span');
        if (!span) {
            return;
        }
        let specialRule = '';
        const text = (this.textContent || '').trim();
        if (text === ',' || text === ';') {
            specialRule = 'separator';
        }
        else if (text === '.' || text === '⋅') {
            specialRule = 'product';
        }
        else if (text.match(/^[\[{(]*$/)) {
            specialRule = 'begin-brace';
        }
        else if (text.match(/^[\]})]*$/)) {
            specialRule = 'end-brace';
        }
        else if (text.match(/^[|]*$/)) {
            specialRule = 'neut-brace';
        }
        // bigger text for math ops
        this.classList.remove('mo-bigger');
        if (text && (0x2200 <= text.charCodeAt(0)) && (text.charCodeAt(0) <= 0x2233)) {
            if ((getComputedStyle(this).getPropertyValue('--math-style-level') || '').trim() !== 'sub') {
                this.classList.add('mo-bigger');
            }
        }
        const newFormStyle = specialRule || 'infix';
        if (this.formStyle !== newFormStyle) {
            if (this.formStyle) {
                this.classList.remove(this.formStyle);
            }
            this.formStyle = `mo-${newFormStyle}`;
            this.classList.add(this.formStyle);
        }
        let effectiveStretch = this.stretchy && this.stretchy.trim().toLowerCase() === 'true';
        if (!this.stretchy) {
            if (getComputedStyle(this).getPropertyValue('--math-style-stretchy').trim() === 'true') {
                effectiveStretch = true;
            }
            else {
                effectiveStretch = specialRule === 'begin-brace' || specialRule === 'end-brace' || specialRule === 'neut-brace';
            }
        }
        span.style.width = null;
        if (!effectiveStretch) {
            span.classList.add('fullWidthSpan');
            this.classList.remove('mo-stretchy');
            span.style.transform = null;
            span.style.lineHeight = null;
            span.classList.remove('invisible');
        }
        else {
            span.classList.remove('fullWidthSpan');
            this.classList.add('mo-stretchy');
            span.style.lineHeight = '1';
            setTimeout(() => {
                if (span.style.transform) {
                    return;
                }
                span.classList.remove('invisible');
                const spanSize = span.getBoundingClientRect();
                const size = this.getBoundingClientRect();
                const scaleY = spanSize.height ? (size.height / spanSize.height) : 1;
                const scaleX = spanSize.width ? (size.width / spanSize.width) : 1;
                if (scaleY <= 1) {
                    span.style.lineHeight = null;
                }
                if (scaleX !== 1) {
                    span.style.width = '100%';
                }
                span.style.transform = `scale(${scaleX}, ${scaleY})`;
            }, 50);
        }
    }
};
__decorate$4([
    property({ type: String }),
    __metadata$1("design:type", String)
], exports.MathOElement.prototype, "form", void 0);
__decorate$4([
    property({ type: String }),
    __metadata$1("design:type", String)
], exports.MathOElement.prototype, "stretchy", void 0);
exports.MathOElement = __decorate$4([
    element('math-o')
], exports.MathOElement);

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathIElement = class MathIElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        font-style: italic;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathIElement = __decorate$5([
    element('math-i')
], exports.MathIElement);

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathSElement = class MathSElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      :host:before {
        content: "\\0022";
        margin-right: -0.2em;
      }
      :host:after {
        content: "\\0022";
        margin-left: -0.2em;
      }
      :host([lquote]):before {
        content: attr(lquote)
      }
      :host([rquote]):after {
        content: attr(rquote)
      }
    </style>
    <slot></slot>
    `;
    }
};
__decorate$6([
    property({ type: String, reflect: true }),
    __metadata$2("design:type", String)
], exports.MathSElement.prototype, "lquote", void 0);
__decorate$6([
    property({ type: String, reflect: true }),
    __metadata$2("design:type", String)
], exports.MathSElement.prototype, "rquote", void 0);
exports.MathSElement = __decorate$6([
    element('math-s')
], exports.MathSElement);

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathSpaceElement = class MathSpaceElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.width = '0em';
        this.height = '0ex';
        this.depth = '0ex';
    }
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        vertical-align: top;
        background: var(--math-background, inherit);
      }
    </style>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.style.width = this.width;
        this.style.height = this.height;
        this.style.marginBottom = this.depth;
    }
};
__decorate$7([
    property({ type: String }),
    __metadata$3("design:type", Object)
], exports.MathSpaceElement.prototype, "width", void 0);
__decorate$7([
    property({ type: String }),
    __metadata$3("design:type", Object)
], exports.MathSpaceElement.prototype, "height", void 0);
__decorate$7([
    property({ type: String }),
    __metadata$3("design:type", Object)
], exports.MathSpaceElement.prototype, "depth", void 0);
exports.MathSpaceElement = __decorate$7([
    element('math-space')
], exports.MathSpaceElement);

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathTextElement = class MathTextElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        white-space: nowrap;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathTextElement = __decorate$8([
    element('math-text')
], exports.MathTextElement);

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathGlyphElement = class MathGlyphElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.width = 'auto';
        this.height = 'auto';
        this.valign = 'auto';
        this.alt = '';
    }
    render() {
        const v = this.valign ? (this.valign.indexOf('-') === 0 ? this.valign.substring(1) : `-${this.valign}`) : '0';
        const style = this.src ? `width: ${this.width || 'auto'}; height: ${this.height || 'auto'}; transform: translate3d(0,${v},0);` : 'display: none;';
        return html `
    <style>
      :host {
        display: inline-block;
        background: var(--math-background, inherit);
      }
      img {
        display: block;
      }
    </style>
    <img src="${this.src || ''}" alt="${this.alt}" style="${style}">
    `;
    }
};
__decorate$9([
    property({ type: String }),
    __metadata$4("design:type", String)
], exports.MathGlyphElement.prototype, "src", void 0);
__decorate$9([
    property({ type: String }),
    __metadata$4("design:type", Object)
], exports.MathGlyphElement.prototype, "width", void 0);
__decorate$9([
    property({ type: String }),
    __metadata$4("design:type", Object)
], exports.MathGlyphElement.prototype, "height", void 0);
__decorate$9([
    property({ type: String }),
    __metadata$4("design:type", Object)
], exports.MathGlyphElement.prototype, "valign", void 0);
__decorate$9([
    property({ type: String }),
    __metadata$4("design:type", Object)
], exports.MathGlyphElement.prototype, "alt", void 0);
exports.MathGlyphElement = __decorate$9([
    element('math-glyph')
], exports.MathGlyphElement);

var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
class MathTableBaseElement extends MathMLElement {
    updateAlignment() {
        const s = this.style;
        if (this.columnalign) {
            switch (this.columnalign) {
                case 'left':
                    s.setProperty('--math-ml-columnalign', 'left');
                    break;
                case 'right':
                    s.setProperty('--math-ml-columnalign', 'right');
                    break;
                default:
                case 'center':
                    s.setProperty('--math-ml-columnalign', 'center');
                    break;
            }
        }
        if (this.rowalign) {
            switch (this.rowalign) {
                case 'baseline':
                    s.setProperty('--math-ml-rowalign', 'baseline');
                    break;
                case 'bottom':
                    s.setProperty('--math-ml-rowalign', 'bottom');
                    break;
                case 'axis':
                case 'center':
                    s.setProperty('--math-ml-rowalign', 'middle');
                    break;
                case 'top':
                    s.setProperty('--math-ml-rowalign', 'top');
                    break;
                default:
                    s.removeProperty('--math-ml-rowalign');
                    break;
            }
        }
    }
}
__decorate$a([
    property({ type: String }),
    __metadata$5("design:type", String)
], MathTableBaseElement.prototype, "columnalign", void 0);
__decorate$a([
    property({ type: String }),
    __metadata$5("design:type", String)
], MathTableBaseElement.prototype, "rowalign", void 0);

var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathTDElement = class MathTDElement extends MathTableBaseElement {
    render() {
        return html `
    <style>
      :host {
        display: table-cell;
        text-align: var(--math-ml-columnalign);
        vertical-align: var(--math-ml-rowalign);
        padding-left: var(--math-table-columnspacing);
        padding-right: var(--math-table-columnspacing);
        padding-top: var(--math-table-rowspacing);
        padding-bottom: var(--math-table-rowspacing);
        padding-left: calc(var(--math-table-columnspacing)/2);
        padding-right: calc(var(--math-table-columnspacing)/2);
        padding-top: calc(var(--math-table-rowspacing)/2);
        padding-bottom: calc(var(--math-table-rowspacing)/2);
        border-bottom: var(--math-table-row-border);
        border-right: var(--math-table-column-border);
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.updateAlignment();
    }
};
exports.MathTDElement = __decorate$b([
    element('math-td')
], exports.MathTDElement);

var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathTRElement = class MathTRElement extends MathTableBaseElement {
    render() {
        return html `
    <style>
      :host {
        display: table-row;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      slot::slotted(math-td:last-child) {
        --math-table-column-border: none;
      }
    </style>
    <slot @slotchange="${this.refreshSlot}"></slot>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.updateAlignment();
        this.refreshSlot();
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        if (this.columnalign) {
            const split = this.columnalign.trim().split(' ').filter((d) => {
                if (d.trim()) {
                    return true;
                }
                return false;
            });
            if (split.length > 1) {
                const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE).filter((d) => {
                    return d.tagName === 'MATH-TD';
                });
                for (let i = 0; i < split.length; i++) {
                    if (i >= nodes.length) {
                        break;
                    }
                    nodes[i].columnalign = split[i];
                }
            }
        }
    }
};
exports.MathTRElement = __decorate$c([
    element('math-tr')
], exports.MathTRElement);

var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathLabeledTRElement = class MathLabeledTRElement extends MathTableBaseElement {
    render() {
        return html `
    <style>
      :host {
        display: table-row;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      slot::slotted(math-td:first-child) {
        display: none;
      }
      slot::slotted(math-td:last-child) {
        --math-table-column-border: none;
      }
    </style>
    <slot></slot>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.updateAlignment();
    }
};
exports.MathLabeledTRElement = __decorate$d([
    element('math-labeledtr')
], exports.MathLabeledTRElement);

var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathTableElement = class MathTableElement extends MathTableBaseElement {
    constructor() {
        super();
        this.columnlines = 'none';
        this.rowlines = 'none';
        this.frame = 'none';
        this.columnspacing = '0.8em';
        this.rowspacing = '0.8em';
        this.framespacing = '0.4em 0.5ex';
        this.columnalign = this.columnalign || 'center';
    }
    render() {
        return html `
    <style>
      :host {
        display: inline-table;
        border: var(--math-table-border, 'none');
        padding: var(--math-table-padding, 0.5ex 0.4em);
        width: var(--math-table-width);
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      slot::slotted(math-tr:last-child) {
        --math-table-row-border: none;
      }
    </style>
    <slot></slot>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.updateAlignment();
        const s = this.style;
        if (this.frame) {
            switch (this.frame) {
                case 'none':
                    s.setProperty('--math-table-border', 'none');
                    break;
                case 'solid':
                    s.setProperty('--math-table-border', 'solid thin');
                    break;
                case 'dashed':
                    s.setProperty('--math-table-border', 'dashed thin');
                    break;
                default:
                    s.removeProperty('--math-table-border');
                    break;
            }
        }
        if (this.rowlines) {
            switch (this.rowlines) {
                case 'none':
                    s.setProperty('--math-table-row-border', 'none');
                    break;
                case 'solid':
                    s.setProperty('--math-table-row-border', 'solid thin');
                    break;
                case 'dashed':
                    s.setProperty('--math-table-row-border', 'dashed thin');
                    break;
                default:
                    s.removeProperty('--math-table-row-border');
                    break;
            }
        }
        if (this.columnlines) {
            switch (this.columnlines) {
                case 'none':
                    s.setProperty('--math-table-column-border', 'none');
                    break;
                case 'solid':
                    s.setProperty('--math-table-column-border', 'solid thin');
                    break;
                case 'dashed':
                    s.setProperty('--math-table-column-border', 'dashed thin');
                    break;
                default:
                    s.removeProperty('--math-table-column-border');
                    break;
            }
        }
        if (this.framespacing) {
            const split = this.framespacing.split(' ').reverse();
            s.setProperty('--math-table-padding', split.join(' '));
        }
        else {
            s.removeProperty('--math-table-padding');
        }
        if (this.width) {
            s.setProperty('--math-table-width', this.width);
        }
        else {
            s.removeProperty('--math-table-width');
        }
        if (this.columnspacing) {
            s.setProperty('--math-table-columnspacing', this.columnspacing);
        }
        else {
            s.removeProperty('--math-table-columnspacing');
        }
        if (this.rowspacing) {
            s.setProperty('--math-table-rowspacing', this.columnspacing);
        }
        else {
            s.removeProperty('--math-table-rowspacing');
        }
        if (this.columnalign) {
            const split = this.columnalign.trim().split(' ').filter((d) => {
                if (d.trim()) {
                    return true;
                }
                return false;
            });
            if (split.length > 1) {
                const slot = this.shadowRoot.querySelector('slot');
                if (slot) {
                    slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE).filter((d) => {
                        return d.tagName === 'MATH-TR' || d.tagName === 'MATH-LABELEDTR';
                    }).forEach((d) => {
                        const row = d;
                        row.columnalign = row.columnalign || (this.columnalign).trim();
                    });
                }
            }
        }
    }
};
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", String)
], exports.MathTableElement.prototype, "columnlines", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", String)
], exports.MathTableElement.prototype, "rowlines", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", String)
], exports.MathTableElement.prototype, "frame", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", Object)
], exports.MathTableElement.prototype, "columnspacing", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", Object)
], exports.MathTableElement.prototype, "rowspacing", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", Object)
], exports.MathTableElement.prototype, "framespacing", void 0);
__decorate$e([
    property({ type: String }),
    __metadata$6("design:type", String)
], exports.MathTableElement.prototype, "width", void 0);
exports.MathTableElement = __decorate$e([
    element('math-table'),
    __metadata$6("design:paramtypes", [])
], exports.MathTableElement);

var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathSupElement = class MathSupElement extends MathMLElement {
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        position: relative;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      ::slotted(:first-child) {
        padding-right: 0.16em;
      }
      ::slotted(:not(:first-child)) {
        font-size: 0.8em;
        --math-style-level: sub;
        position: absolute;
        left: 100%;
        opacity: 0;
        line-height: 1;
      }
    </style>
    <div class="horizontal layout">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length > 1) {
            setTimeout(() => {
                const s1 = nodes[0].getBoundingClientRect();
                const supNode = nodes[1];
                const s2 = supNode.getBoundingClientRect();
                supNode.style.opacity = '1';
                const margins = [0, 0];
                const db = s2.bottom - (s1.bottom - (s1.height / 2));
                if (db > 0) {
                    supNode.style.top = `${-db}px`;
                    margins[0] = db;
                }
                margins[1] = s2.width + 5;
                this.style.margin = `${margins[0]}px ${margins[1]}px 0 0`;
            }, 50);
        }
    }
};
exports.MathSupElement = __decorate$f([
    element('math-sup')
], exports.MathSupElement);

var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathSubElement = class MathSubElement extends MathMLElement {
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        position: relative;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      ::slotted(:first-child) {
        padding-right: 0.1em;
        margin: 0;
      }
      ::slotted(:not(:first-child)) {
        font-size: 0.8em;
        --math-style-level: sub;
        position: absolute;
        left: 100%;
        opacity: 0;
        line-height: 1;
      }
    </style>
    <div class="horizontal layout">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length > 1) {
            setTimeout(() => {
                const s1 = nodes[0].getBoundingClientRect();
                const subNode = nodes[1];
                const s2 = subNode.getBoundingClientRect();
                subNode.style.opacity = '1';
                const margins = [0, 0];
                const hh = s1.height / 2;
                let db = hh;
                if ((hh + s2.height) < s1.height) {
                    db = s1.height - s2.height;
                }
                else {
                    margins[0] = (hh + s2.height) - s1.height;
                }
                subNode.style.top = `${db}px`;
                margins[1] = s2.width + 5;
                this.style.margin = `0 ${margins[1]}px ${margins[0]}px 0`;
            }, 50);
        }
    }
};
exports.MathSubElement = __decorate$g([
    element('math-sub')
], exports.MathSubElement);

var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathSubSupElement = class MathSubSupElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.pendingLayout = false;
    }
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        position: relative;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      ::slotted(:first-child) {
        padding-right: 0.16em;
      }
      ::slotted(:not(:first-child)) {
        font-size: 0.75em;
        --math-style-level: sub;
        position: absolute;
        left: 100%;
        opacity: 0;
        line-height: 1;
      }
    </style>
    <div class="horizontal layout">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    refreshSlot() {
        if (this.pendingLayout) {
            return;
        }
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length > 2) {
            this.pendingLayout = true;
            const runnable = () => {
                const s1 = nodes[0].getBoundingClientRect();
                const subNode = nodes[1];
                const supNode = nodes[2];
                const subSize = subNode.getBoundingClientRect();
                const supSize = supNode.getBoundingClientRect();
                subNode.style.opacity = '1';
                supNode.style.opacity = '1';
                const margins = [0, 0, 0];
                // sub
                const hh = s1.height / 2;
                let db = hh;
                if ((hh + subSize.height) < s1.height) {
                    db = s1.height - subSize.height;
                }
                else {
                    margins[2] = (hh + subSize.height) - s1.height;
                }
                subNode.style.top = `${db}px`;
                margins[1] = subSize.width + 5;
                // sup
                db = supSize.bottom - (s1.bottom - (s1.height / 2));
                if (db > 0) {
                    supNode.style.top = `${-db}px`;
                    margins[0] = db;
                }
                margins[1] = Math.max(supSize.width + 5, margins[1]);
                this.style.margin = `${margins[0]}px ${margins[1]}px ${margins[2]}px 0`;
            };
            setTimeout(runnable, 50);
            setTimeout(() => {
                this.pendingLayout = false;
                runnable();
            }, 500);
        }
    }
};
exports.MathSubSupElement = __decorate$h([
    element('math-subsup')
], exports.MathSubSupElement);

var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathMultiScriptsElement = class MathMultiScriptsElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.pendingLayout = false;
    }
    render() {
        return html `
    <style>
      ${AllFlex}
      :host {
        display: inline-block;
        position: relative;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      ::slotted(:first-child) {
        padding: 0 0.16em;
      }
      ::slotted(:not(:first-child)) {
        font-size: 0.75em;
        --math-style-level: sub;
        position: absolute;
        opacity: 0;
        line-height: 1;
      }
      ::slotted(.rightscript) {
        left: 100%;
      }
      ::slotted(.leftscript) {
        right: 100%;
      }
    </style>
    <div class="horizontal layout">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    refreshSlot() {
        if (this.pendingLayout) {
            return;
        }
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length === 1 && (nodes[0].tagName === 'math-prescripts'.toUpperCase())) {
            return;
        }
        if (nodes.length > 2) {
            this.pendingLayout = true;
            const runnable = () => {
                const postNodes = [null, null];
                const preNodes = [null, null];
                let current = postNodes;
                for (let i = 1; i < nodes.length; i++) {
                    const n = nodes[i];
                    if (n.tagName === 'math-prescripts'.toUpperCase()) {
                        current = preNodes;
                    }
                    else {
                        if (!current[0]) {
                            current[0] = n;
                        }
                        else if (!current[1]) {
                            current[1] = n;
                        }
                    }
                }
                const s1 = nodes[0].getBoundingClientRect();
                const margins = [0, 0, 0, 0];
                // do post
                {
                    // sub
                    if (postNodes[0]) {
                        const subNode = postNodes[0];
                        const subSize = subNode.getBoundingClientRect();
                        subNode.style.opacity = '1';
                        subNode.classList.add('rightscript');
                        const hh = s1.height / 2;
                        let db = hh;
                        if ((hh + subSize.height) < s1.height) {
                            db = s1.height - subSize.height;
                        }
                        else {
                            margins[2] = (hh + subSize.height) - s1.height;
                        }
                        subNode.style.top = `${db}px`;
                        margins[1] = subSize.width + 5;
                    }
                    // sup
                    if (postNodes[1]) {
                        const supNode = postNodes[1];
                        supNode.style.opacity = '1';
                        supNode.classList.add('rightscript');
                        const supSize = supNode.getBoundingClientRect();
                        const db = supSize.bottom - (s1.bottom - (s1.height / 2));
                        if (db > 0) {
                            supNode.style.top = `${-db}px`;
                            margins[0] = db;
                        }
                        margins[1] = Math.max(supSize.width + 5, margins[1]);
                    }
                }
                // do pre
                {
                    // sub
                    if (preNodes[0]) {
                        const subNode = preNodes[0];
                        const subSize = subNode.getBoundingClientRect();
                        subNode.style.opacity = '1';
                        subNode.classList.add('leftscript');
                        const hh = s1.height / 2;
                        let db = hh;
                        if ((hh + subSize.height) < s1.height) {
                            db = s1.height - subSize.height;
                        }
                        else {
                            margins[2] = Math.max((hh + subSize.height) - s1.height, margins[2]);
                        }
                        subNode.style.top = `${db}px`;
                        margins[3] = Math.max(subSize.width + 5, margins[3]);
                    }
                    // sup
                    if (preNodes[1]) {
                        const supNode = preNodes[1];
                        supNode.style.opacity = '1';
                        supNode.classList.add('leftscript');
                        const supSize = supNode.getBoundingClientRect();
                        const db = supSize.bottom - (s1.bottom - (s1.height / 2));
                        if (db > 0) {
                            supNode.style.top = `${-db}px`;
                            margins[0] = Math.max(db, margins[0]);
                        }
                        margins[3] = Math.max(supSize.width + 5, margins[3]);
                    }
                }
                this.style.margin = `${margins[0]}px ${margins[1]}px ${margins[2]}px ${margins[3]}px`;
            };
            setTimeout(runnable, 100);
            setTimeout(() => {
                this.pendingLayout = false;
                runnable();
            }, 800);
        }
    }
};
exports.MathMultiScriptsElement = __decorate$i([
    element('math-multiscripts')
], exports.MathMultiScriptsElement);

var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathPreScriptsElement = class MathPreScriptsElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        width: 0;
        height: 0;
        display: none;
      }
    </style>
    `;
    }
};
exports.MathPreScriptsElement = __decorate$j([
    element('math-prescripts')
], exports.MathPreScriptsElement);

var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathNoneElement = class MathNoneElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        height: 0;
        width: 0;
        padding: 0 3px;
      }
    </style>
    `;
    }
};
exports.MathNoneElement = __decorate$k([
    element('math-none')
], exports.MathNoneElement);

var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathOverElement = class MathOverElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.accent = false;
        this.align = 'center';
    }
    render() {
        return html `
    <style>
      ${VertFlex}
      :host {
        display: inline-block;
        margin: 0 0.16em;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      .vertical.layout.reverse {
        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      }
      ::slotted(:not(:first-child)) {
        width: 100%;
        line-height: 1;
        margin: 0;
        text-align: var(--math-over-align, center);
        --math-style-level: sub;
        font-size: var(--math-over-font-size, 0.8em);
        --math-style-stretchy: true;
      }
    </style>
    <div class="vertical layout reverse">
      <slot></slot>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        const s = this.style;
        switch (this.align) {
            case 'right':
                s.setProperty('--math-over-align', 'right');
                break;
            case 'left':
                s.setProperty('--math-over-align', 'left');
                break;
            default:
                s.setProperty('--math-over-align', 'center');
                break;
        }
        s.setProperty('--math-over-font-size', this.accent ? '1em' : '0.8em');
    }
};
__decorate$l([
    property({ type: Boolean, reflect: true }),
    __metadata$7("design:type", Object)
], exports.MathOverElement.prototype, "accent", void 0);
__decorate$l([
    property(),
    __metadata$7("design:type", String)
], exports.MathOverElement.prototype, "align", void 0);
exports.MathOverElement = __decorate$l([
    element('math-over')
], exports.MathOverElement);

var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathUnderElement = class MathUnderElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.accentunder = false;
        this.align = 'center';
    }
    render() {
        return html `
    <style>
      ${VertFlex}
      :host {
        display: inline-block;
        margin: 0 0.16em;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      ::slotted(:not(:first-child)) {
        width: 100%;
        line-height: 1;
        margin: 0;
        text-align: var(--math-under-align, center);
        --math-style-level: sub;
        font-size: var(--math-under-font-size, 0.8em);
        --math-style-stretchy: true;
      }
    </style>
    <div class="vertical layout">
      <slot></slot>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        const s = this.style;
        switch (this.align) {
            case 'right':
                s.setProperty('--math-under-align', 'right');
                break;
            case 'left':
                s.setProperty('--math-under-align', 'left');
                break;
            default:
                s.setProperty('--math-under-align', 'center');
                break;
        }
        s.setProperty('--math-under-font-size', this.accentunder ? '1em' : '0.8em');
    }
};
__decorate$m([
    property({ type: Boolean, reflect: true }),
    __metadata$8("design:type", Object)
], exports.MathUnderElement.prototype, "accentunder", void 0);
__decorate$m([
    property(),
    __metadata$8("design:type", String)
], exports.MathUnderElement.prototype, "align", void 0);
exports.MathUnderElement = __decorate$m([
    element('math-under')
], exports.MathUnderElement);

var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathUnderOverElement = class MathUnderOverElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.accent = false;
        this.accentunder = false;
        this.align = 'center';
    }
    render() {
        return html `
    <style>
      ${VertFlex}
      :host {
        display: inline-block;
        margin: 0 0.16em;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      .vertical.layout.reverse {
        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      }
      .under {
        width: 100%;
        line-height: 1;
        margin: 0;
        text-align: var(--math-underover-align, center);
        --math-style-level: sub;
        font-size: var(--math-under-font-size, 0.75em);
        --math-style-stretchy: true;
      }
      .over {
        width: 100%;
        line-height: 1;
        margin: 0;
        text-align: var(--math-underover-align, center);
        --math-style-level: sub;
        font-size: var(--math-over-font-size, 0.75em);
        --math-style-stretchy: true;
      }
      .base {
        margin: 0;
      }
    </style>
    <div id="muoPanel" class="vertical layout"></div>
    <div style="display: hidden;">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        const s = this.style;
        switch (this.align) {
            case 'right':
                s.setProperty('--math-underover-align', 'right');
                break;
            case 'left':
                s.setProperty('--math-underover-align', 'left');
                break;
            default:
                s.setProperty('--math-underover-align', 'center');
                break;
        }
        s.setProperty('--math-under-font-size', this.accentunder ? '1em' : '0.75em');
        s.setProperty('--math-over-font-size', this.accent ? '1em' : '0.75em');
        this.refreshSlot();
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length) {
            const panel = this.shadowRoot.querySelector('#muoPanel');
            while (panel.firstChild) {
                panel.removeChild(panel.firstChild);
            }
            if (nodes.length > 2) {
                nodes[2].classList.add('over');
                panel.appendChild(nodes[2]);
            }
            nodes[0].classList.add('base');
            panel.append(nodes[0]);
            if (nodes.length > 1) {
                nodes[1].classList.add('under');
                panel.appendChild(nodes[1]);
            }
        }
    }
};
__decorate$n([
    property({ type: Boolean, reflect: true }),
    __metadata$9("design:type", Object)
], exports.MathUnderOverElement.prototype, "accent", void 0);
__decorate$n([
    property({ type: Boolean, reflect: true }),
    __metadata$9("design:type", Object)
], exports.MathUnderOverElement.prototype, "accentunder", void 0);
__decorate$n([
    property(),
    __metadata$9("design:type", String)
], exports.MathUnderOverElement.prototype, "align", void 0);
exports.MathUnderOverElement = __decorate$n([
    element('math-underover')
], exports.MathUnderOverElement);

var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathSqrtElement = class MathSqrtElement extends MathMLElement {
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        vertical-align: bottom;
        align-self: center;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      .msqrtContent {
        padding: 1px 0.05em 0 0.2em;
        border-top: solid thin;
        white-space: nowrap;
      }
      #msqrtGlyphSpan {
        width: 1.1em;
        position: relative;
      }
      svg {
        position: absolute;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
      }
      path {
        fill: none;
        stroke: currentColor;
        stroke-width: 1;
      }
    </style>
    <div class="horizontal layout">
      <div id="msqrtGlyphSpan"><svg><path id="rootPath"></path></svg></div>
      <div class="flex msqrtContent"><slot @slotchange="${this.onSlotCange}"></slot></div>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.onSlotCange();
    }
    onSlotCange() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        setTimeout(() => {
            this.drawRoot();
        }, 10);
    }
    drawRoot() {
        const span = this.shadowRoot.querySelector('#msqrtGlyphSpan');
        const path = this.shadowRoot.querySelector('#rootPath');
        if (span && path) {
            const size = span.getBoundingClientRect();
            const width = size.width;
            const height = size.height;
            const d = `M0 ${height * 0.55} H${width * 0.13} L${width * 0.45} ${height - 2} L${width} 0`;
            path.setAttribute('d', d);
        }
    }
};
exports.MathSqrtElement = __decorate$o([
    element('math-sqrt')
], exports.MathSqrtElement);

var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathRootElement = class MathRootElement extends MathMLElement {
    render() {
        return html `
    <style>
      ${HorizFlex}
      :host {
        display: inline-block;
        vertical-align: bottom;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      .msqrtContent {
        padding: 1px 0.05em 0 0.2em;
        border-top: solid thin;
        white-space: nowrap;
      }
      #msqrtGlyphSpan {
        width: 1.1em;
        position: relative;
      }
      svg {
        position: absolute;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
      }
      path {
        fill: none;
        stroke: currentColor;
        stroke-width: 1;
      }
      ::slotted(:not(:first-child)) {
        font-size: 0.66em;
        position: absolute;
        top: 52%;
        right: 57%;
        transform: translate3d(-100%,-100%,0);
      }
    </style>
    <div class="horizontal layout" style="position: relative;">
      <div id="msqrtGlyphSpan"><svg><path id="rootPath"></path></svg></div>
      <div class="flex msqrtContent"><slot @slotchange="${this.onSlotCange}"></slot></div>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.onSlotCange();
    }
    onSlotCange() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        setTimeout(() => {
            this.drawRoot();
        }, 10);
    }
    drawRoot() {
        const span = this.shadowRoot.querySelector('#msqrtGlyphSpan');
        const path = this.shadowRoot.querySelector('#rootPath');
        if (span && path) {
            const size = span.getBoundingClientRect();
            const width = size.width;
            const height = size.height;
            const d = `M0 ${height * 0.55} H${width * 0.13} L${width * 0.45} ${height - 2} L${width} 0`;
            path.setAttribute('d', d);
        }
    }
};
exports.MathRootElement = __decorate$p([
    element('math-root')
], exports.MathRootElement);

var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$a = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathFracElement = class MathFracElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.bevelled = false;
        this.numalign = 'center';
        this.denomalign = 'center';
    }
    render() {
        let bevelledDivStyle = 'stroke-width: 1;';
        let unbevelledDivStyle = 'border-top: solid thin;';
        if (this.linethickness && (this.linethickness.trim().charAt(0) === '0')) {
            bevelledDivStyle = 'stroke-width: 0;';
            unbevelledDivStyle = '';
        }
        return html `
    <style>
      :host {
        display: inline-block;
        vertical-align: middle;
        align-self: self-start;
        margin: 0 0.16em;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      #mfracN, #mfracD {
        font-size: 0.9em;
        --math-style-level: sub;
      }
      #mfracPanel.unbevelled {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      }
      #mfracPanel.bevelled {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      }
      #mfracPanel.bevelled #mfracN{
        transform: translateY(-0.3em);
      }
      #mfracPanel.bevelled #mfracD{
        transform: translateY(0.3em);
      }
      #mfracDivider.unbevelled {
        width: 100%;
        border-top: 1px solid;
      }
      #bevelledDivider {
        min-width: 6px;
        position: relative;
        margin: 0 0.2em;
      }
      #unbevelledDivider {
        width: 100%;
        height: 0;
      }
      .hidden {
        display: none !important;
      }
      svg {
        position: absolute;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
      }
      path {
        fill: none;
        stroke: currentColor;
      }
    </style>
    <div id="mfracPanel">
      <div id="mfracN"></div>
      <div id="bevelledDivider" class="hidden">&nbsp;<svg><path id="bevelledPath" style="${bevelledDivStyle}"></path></svg></div>
      <div id="unbevelledDivider" style="${unbevelledDivStyle}"></div>
      <div id="mfracD"></div>
    </div>
    <div style="display: hidden;"><slot @slotchange="${this.refreshSlot}"></slot></div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.refreshSlot();
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        if (!slot) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length > 1) {
            const nu = this.shadowRoot.querySelector('#mfracN');
            const de = this.shadowRoot.querySelector('#mfracD');
            nu.appendChild(nodes[0]);
            de.appendChild(nodes[1]);
            for (let i = 2; i < nodes.length; i++) {
                if (nodes[i].parentElement) {
                    nodes[i].parentElement.removeChild(nodes[i]);
                }
            }
        }
        this.updateBevlled();
    }
    updateBevlled() {
        const panel = this.shadowRoot.querySelector('#mfracPanel');
        const nu = this.shadowRoot.querySelector('#mfracN');
        const de = this.shadowRoot.querySelector('#mfracD');
        const bevelledDivider = this.shadowRoot.querySelector('#bevelledDivider');
        const unbevelledDivider = this.shadowRoot.querySelector('#unbevelledDivider');
        nu.style.textAlign = this.numalign;
        de.style.textAlign = this.denomalign;
        if (this.bevelled) {
            panel.classList.remove('unbevelled');
            panel.classList.add('bevelled');
            bevelledDivider.classList.remove('hidden');
            unbevelledDivider.classList.add('hidden');
            setTimeout(() => {
                this.drawBevelledDivider();
            }, 10);
        }
        else {
            panel.classList.remove('bevelled');
            panel.classList.add('unbevelled');
            bevelledDivider.classList.add('hidden');
            unbevelledDivider.classList.remove('hidden');
        }
    }
    drawBevelledDivider() {
        const span = this.shadowRoot.querySelector('#bevelledDivider');
        const path = this.shadowRoot.querySelector('#bevelledPath');
        if (span && path) {
            const size = span.getBoundingClientRect();
            const width = size.width;
            const height = size.height;
            const d = `M0 ${height} L${width} 0`;
            path.setAttribute('d', d);
        }
    }
};
__decorate$q([
    property({ type: Boolean }),
    __metadata$a("design:type", Object)
], exports.MathFracElement.prototype, "bevelled", void 0);
__decorate$q([
    property({ type: String }),
    __metadata$a("design:type", String)
], exports.MathFracElement.prototype, "numalign", void 0);
__decorate$q([
    property({ type: String }),
    __metadata$a("design:type", String)
], exports.MathFracElement.prototype, "denomalign", void 0);
__decorate$q([
    property({ type: String }),
    __metadata$a("design:type", String)
], exports.MathFracElement.prototype, "linethickness", void 0);
exports.MathFracElement = __decorate$q([
    element('math-frac')
], exports.MathFracElement);

var __decorate$r = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$b = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const SVGNS = 'http://www.w3.org/2000/svg';
exports.MathEncloseElement = class MathEncloseElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.notation = 'longdiv';
    }
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        position: relative;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      svg {
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;
      }
      ellipse, path {
        fill: none;
        stroke: currentColor;
        stroke-width: 1;
      }
    </style>
    <div id="menclosePanel"><slot @slotchange="${this.refresh}"></slot></div>
    <svg></svg>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.refresh();
    }
    refresh() {
        if (!this.shadowRoot) {
            return;
        }
        if ((!this.shadowRoot.querySelector('svg')) || (!this.shadowRoot.querySelector('slot'))) {
            return;
        }
        setTimeout(() => this.redraw(), 100);
    }
    adjustPadding(paddings, suggestions) {
        for (let i = 0; i < suggestions.length; i++) {
            paddings[i] = Math.max(paddings[i], suggestions[i]);
        }
    }
    redraw() {
        const svg = this.shadowRoot.querySelector('svg');
        const panel = this.shadowRoot.querySelector('#menclosePanel');
        const size = this.getBoundingClientRect();
        const paddings = [0, 0, 0, 0];
        const tokens = (this.notation || '').trim().split(' ').filter((d) => { return d.trim() ? true : false; });
        tokens.forEach((t) => {
            switch (t) {
                case 'longdiv':
                    this.adjustPadding(paddings, [2, 0, 0, 12]);
                    break;
                case 'actuarial':
                    this.adjustPadding(paddings, [2, 2, 0, 0]);
                    break;
                case 'radical':
                    this.adjustPadding(paddings, [2, 0, 0, 18]);
                    break;
                case 'phasorangle':
                    this.adjustPadding(paddings, [0, 0, 2, 16]);
                    break;
                case 'circle':
                    this.adjustPadding(paddings, [2, 4, 2, 4]);
                    break;
                default:
                    this.adjustPadding(paddings, [1, 1, 1, 1]);
                    break;
            }
        });
        panel.style.padding = paddings.join('px ').trim() + 'px';
        const width = size.width + paddings[1] + paddings[3];
        const height = size.height + paddings[0] + paddings[2];
        svg.style.width = `${width}px`;
        svg.style.height = `${height}px`;
        while (svg.firstChild) {
            svg.removeChild(svg.firstChild);
        }
        panel.style.borderTop = null;
        panel.style.borderBottom = null;
        panel.style.borderLeft = null;
        panel.style.borderRight = null;
        panel.style.borderRadius = null;
        tokens.forEach((t) => {
            switch (t) {
                case 'longdiv': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M0 1 H ${width} M0 1 C 8 ${height * 0.33} 8 ${height * 0.66} 0 ${height}`);
                    svg.appendChild(path);
                    break;
                }
                case 'actuarial':
                    panel.style.borderRight = '1px solid';
                    panel.style.borderTop = '1px solid';
                    break;
                case 'radical': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M0 ${height * 0.55} H${18 * 0.13} L${18 * 0.45} ${height - 2} L${18} 1 L${width} 1`);
                    svg.appendChild(path);
                    break;
                }
                case 'box':
                    panel.style.borderRight = '1px solid';
                    panel.style.borderTop = '1px solid';
                    panel.style.borderLeft = '1px solid';
                    panel.style.borderBottom = '1px solid';
                    break;
                case 'roundedbox':
                    panel.style.borderRight = '1px solid';
                    panel.style.borderTop = '1px solid';
                    panel.style.borderLeft = '1px solid';
                    panel.style.borderBottom = '1px solid';
                    panel.style.borderRadius = '5px';
                    break;
                case 'circle': {
                    const ellipse = document.createElementNS(SVGNS, 'ellipse');
                    ellipse.setAttribute('cx', `${width / 2}`);
                    ellipse.setAttribute('cy', `${height / 2}`);
                    ellipse.setAttribute('rx', `${width / 2 - 2}`);
                    ellipse.setAttribute('ry', `${height / 2 - 2}`);
                    svg.appendChild(ellipse);
                    break;
                }
                case 'left':
                    panel.style.borderLeft = '1px solid';
                    break;
                case 'right':
                    panel.style.borderRight = '1px solid';
                    break;
                case 'top':
                    panel.style.borderTop = '1px solid';
                    break;
                case 'bottom':
                    panel.style.borderBottom = '1px solid';
                    break;
                case 'madruwb':
                    panel.style.borderRight = '1px solid';
                    panel.style.borderBottom = '1px solid';
                    break;
                case 'updiagonalstrike': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M1 ${height - 1} L${width - 1} ${1}`);
                    svg.appendChild(path);
                    break;
                }
                case 'downdiagonalstrike': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M1 1 L${width - 1} ${height - 1}`);
                    svg.appendChild(path);
                    break;
                }
                case 'verticalstrike': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M${width / 2} 1 L${width / 2} ${height - 1}`);
                    svg.appendChild(path);
                    break;
                }
                case 'horizontalstrike': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M1 ${height / 2} L${width - 1} ${height / 2}`);
                    svg.appendChild(path);
                    break;
                }
                case 'updiagonalarrow': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M1 ${height - 1} L${width - 1} ${1}`);
                    svg.appendChild(path);
                    const a1 = Math.atan(height / width);
                    const a2 = (Math.PI / 2 - a1) - (Math.PI / 6);
                    const a3 = (Math.PI / 6) + a2;
                    const x1 = Math.sin(a2) * 8;
                    const y1 = Math.cos(a2) * 8;
                    const path2 = document.createElementNS(SVGNS, 'path');
                    path2.setAttribute('d', `M${width - 1} ${1} L${width - 1 - x1} ${1 + y1} l${-Math.cos(a3) * 8} ${-Math.sin(a3) * 8} Z`);
                    path2.style.fill = 'currentColor';
                    svg.appendChild(path2);
                    break;
                }
                case 'phasorangle': {
                    const path = document.createElementNS(SVGNS, 'path');
                    path.setAttribute('d', `M16 1 L1 ${height - 1} L${width} ${height - 1}`);
                    svg.appendChild(path);
                    break;
                }
                default:
                    break;
            }
        });
    }
};
__decorate$r([
    property({ type: String }),
    __metadata$b("design:type", Object)
], exports.MathEncloseElement.prototype, "notation", void 0);
exports.MathEncloseElement = __decorate$r([
    element('math-enclose')
], exports.MathEncloseElement);

var __decorate$s = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathPhantomElement = class MathPhantomElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        visibility: hidden;
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathPhantomElement = __decorate$s([
    element('math-phantom')
], exports.MathPhantomElement);

var __decorate$t = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
exports.MathErrorElement = class MathErrorElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        background: rgb(255, 255, 221);
        border: 1px solid red;
        font-weight: bold;
        font-family: sans-serif;
        font-size: 1.1em;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
exports.MathErrorElement = __decorate$t([
    element('math-error')
], exports.MathErrorElement);

var __decorate$u = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$c = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathFencedElement = class MathFencedElement extends MathMLElement {
    constructor() {
        super(...arguments);
        this.close = ')';
        this.open = '(';
        this.separators = ',';
    }
    render() {
        return html `
    <style>
      ${HorizCenterFlex}
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
      #mfencedRow {
        align-items: stretch;
      }
    </style>
    <div id="mfencedRow" class="horizontal layout center"></div>
    <div style="display: hidden;">
      <slot @slotchange="${this.refreshSlot}"></slot>
    </div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.refreshSlot();
    }
    isStretchyString(text) {
        if (text.match(/^[0-9a-zA-Z,;\-_`'"]*$/)) {
            return false;
        }
        return true;
    }
    nextSeparator(index) {
        if (index >= 0) {
            if (this.separators.length) {
                if (index < this.separators.length) {
                    return this.separators.charAt(index);
                }
                return this.separators.charAt(this.separators.length - 1);
            }
        }
        return null;
    }
    refreshSlot() {
        if (!this.shadowRoot) {
            return;
        }
        const slot = this.shadowRoot.querySelector('slot');
        const panel = this.shadowRoot.querySelector('#mfencedRow');
        if (!slot || !panel) {
            return;
        }
        const nodes = slot.assignedNodes().filter((d) => d.nodeType === Node.ELEMENT_NODE);
        if (nodes.length) {
            while (panel.firstChild) {
                panel.removeChild(panel.firstChild);
            }
            let sepIndex = 0;
            for (let i = 0; i < nodes.length; i++) {
                // opener
                if (i === 0 && this.open) {
                    const mo = new exports.MathOElement();
                    if (this.isStretchyString(this.open.trim())) {
                        mo.stretchy = 'true';
                    }
                    mo.textContent = this.open;
                    panel.appendChild(mo);
                }
                // item
                panel.appendChild(nodes[i]);
                // separator
                if (i < (nodes.length - 1)) {
                    const sep = this.nextSeparator(sepIndex);
                    if (sep) {
                        sepIndex++;
                        const mo = new exports.MathOElement();
                        if (this.isStretchyString(sep)) {
                            mo.stretchy = 'true';
                        }
                        mo.textContent = sep;
                        panel.appendChild(mo);
                    }
                }
                if (i === (nodes.length - 1) && this.close) {
                    const mo = new exports.MathOElement();
                    if (this.isStretchyString(this.close.trim())) {
                        mo.stretchy = 'true';
                    }
                    mo.textContent = this.close;
                    panel.appendChild(mo);
                }
            }
        }
    }
};
__decorate$u([
    property({ type: String }),
    __metadata$c("design:type", Object)
], exports.MathFencedElement.prototype, "close", void 0);
__decorate$u([
    property({ type: String }),
    __metadata$c("design:type", Object)
], exports.MathFencedElement.prototype, "open", void 0);
__decorate$u([
    property({ type: String }),
    __metadata$c("design:type", Object)
], exports.MathFencedElement.prototype, "separators", void 0);
exports.MathFencedElement = __decorate$u([
    element('math-fenced')
], exports.MathFencedElement);

var __decorate$v = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$d = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathPaddedElement = class MathPaddedElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <div id="mpaddedPanel"><slot></slot></div>
    `;
    }
    updated(propVals) {
        super.updated(propVals);
        this.refresh();
    }
    refresh() {
        if (!this.shadowRoot) {
            return;
        }
        const panel = this.shadowRoot.querySelector('#mpaddedPanel');
        if (!panel) {
            return;
        }
        setTimeout(() => {
            const size = panel.getBoundingClientRect();
            if (this.height) {
                if (this.height.charAt(0) === '+') {
                    this.style.paddingTop = this.height.substring(1);
                }
                else if (this.height.charAt(0) === '-') {
                    this.style.height = `calc(${size.height}px - ${this.height.substring(1)})`;
                    this.style.paddingTop = '0';
                }
                else {
                    this.style.height = this.height;
                    this.style.paddingTop = '0';
                }
            }
            else {
                this.style.height = 'auto';
                this.style.paddingTop = '0';
            }
            if (this.width) {
                if (this.width.charAt(0) === '+' || this.width.charAt(0) === '-') {
                    this.style.width = `calc(${size.width}px + ${this.width.substring(1)})`;
                }
                else {
                    this.style.width = this.width;
                }
            }
            else {
                this.style.width = 'auto';
            }
        }, 50);
    }
};
__decorate$v([
    property({ type: String }),
    __metadata$d("design:type", String)
], exports.MathPaddedElement.prototype, "height", void 0);
__decorate$v([
    property({ type: String }),
    __metadata$d("design:type", String)
], exports.MathPaddedElement.prototype, "width", void 0);
exports.MathPaddedElement = __decorate$v([
    element('math-padded')
], exports.MathPaddedElement);

var __decorate$w = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$e = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
exports.MathStyleElement = class MathStyleElement extends MathMLElement {
    render() {
        return html `
    <style>
      :host {
        display: inline-block;
        color: var(--math-color, inherit);
        background: var(--math-background, inherit);
      }
    </style>
    <slot></slot>
    `;
    }
};
__decorate$w([
    property({ type: String }),
    __metadata$e("design:type", String)
], exports.MathStyleElement.prototype, "displaystyle", void 0);
exports.MathStyleElement = __decorate$w([
    element('math-style')
], exports.MathStyleElement);
